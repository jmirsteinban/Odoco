#!/bin/bash

# Odocoileus virginianus v1.0
#
# odoco-install
#
# Script de instalación para el administrador de servicios Odoco

# Configuración de colores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# --- Funciones de ayuda ---
function display_error() {
    echo -e "${BOLD}${RED}Error:${NC} $1" >&2
    exit 1
}

function display_warning() {
    echo -e "${BOLD}${YELLOW}Advertencia:${NC} $1"
}

function display_success() {
    echo -e "${GREEN}✔${NC} $1"
}

function check_service_active() {
    systemctl is-active --quiet "$1"
    return $?
}

# --- Configuración automática ---
REAL_USER=$(who am i | awk '{print $1}')
CURRENT_USER=${SUDO_USER:-$USER}
INSTALL_DIR="/home/$REAL_USER/Odoco"
VENV_DIR="$INSTALL_DIR/venv"
SERVICE_NAME="odoco-web.service"

# Rutas importantes
REPO_SERVICE_FILE="$INSTALL_DIR/etc/systemd/system/odoco-web.service"
SYSTEMD_SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME"
#SERVICE_ENV_FILE="$INSTALL_DIR/venv/bin/activate"

# Dependencias
PYTHON_DEPS=("flask" "gunicorn")
SYSTEM_DEPS=("python3-pip" "python3-venv" "python3-full" "psutil")

# --- Verificación inicial ---
echo -e "${BOLD}=== Odoco Installer v1. ===${NC}"
echo -e "Usuario real: ${BOLD}$REAL_USER${NC}"
echo -e "Directorio de instalación: ${BOLD}$INSTALL_DIR${NC}\n"

# Verificar directorio de instalación
if [ ! -d "$INSTALL_DIR" ]; then
    display_error "No se encontró el directorio $INSTALL_DIR\nEjecute desde el directorio correcto o verifique la instalación"
fi

# Verificar si se ejecuta como root
if [ "$(id -u)" -ne 0 ]; then
    echo -e "${YELLOW}Este script debe ejecutarse como root. Usando sudo...${NC}"
    exec sudo -u $REAL_USER "$0" "$@"
fi

# 1: Verificación de requisitos ---
echo -e "${BOLD}1. Verificando requisitos del sistema...${NC}"

# 1.2: Verificar puerto 80
if lsof -i :80 >/dev/null 2>&1; then
    display_warning "El puerto 80 está en uso por:"
    lsof -i :80 | awk '{print $1, $2}' | uniq
    display_error "Libera el puerto 80 antes de continuar"
fi

# 2: Instalación de dependencias del sistema ---
echo -e "\n${BOLD}2. Instalando dependencias del sistema...${NC}"

if ! apt-get update; then
    display_error "Falló apt-get update"
fi

if ! apt-get install -y "${SYSTEM_DEPS[@]}"; then
    display_error "Falló la instalación de dependencias del sistema"
fi
display_success "Dependencias del sistema instaladas"

# 3: Configuración del entorno virtual ---
echo -e "\n${BOLD}3. Configurando entorno virtual...${NC}"

if [ ! -d "$VENV_DIR" ]; then
    if ! python3 -m venv "$VENV_DIR"; then
        display_error "No se pudo crear el entorno virtual"
    fi
    display_success "Entorno virtual creado en $VENV_DIR"
else
    display_success "Entorno virtual ya existe"
fi

# 4: Instalación de dependencias Python ---
echo -e "\n${BOLD}4. Instalando dependencias Python...${NC}"

# 4.5: Activar entorno virtual
source "$VENV_DIR/bin/activate" || display_error "No se pudo activar el entorno virtual"

if ! pip install --upgrade pip; then
    display_warning "No se pudo actualizar pip en el entorno virtual"
fi

if ! pip install "${PYTHON_DEPS[@]}"; then
    display_error "Falló la instalación de dependencias Python en el entorno virtual"
fi
display_success "Dependencias Python instaladas en el entorno virtual"
deactivate

# 5: Configuración del firewall ---
echo -e "\n${BOLD}5. Configurando firewall...${NC}"

if command -v ufw >/dev/null; then
    if ufw status | grep -q "Status: active"; then
        if ! ufw allow 80/tcp; then
            display_warning "No se pudo agregar regla al firewall"
        else
            display_success "Puerto 80 permitido en firewall"
        fi
    else
        display_warning "UFW instalado pero inactivo"
    fi
else
    display_warning "UFW no está instalado"
fi

# 5.5: Configurar authbind para puerto 80 ---
echo -e "\n${BOLD}5.5 Configurando authbind para puerto 80...${NC}"

if ! command -v authbind >/dev/null; then
    if ! apt-get install -y authbind; then
        display_error "No se pudo instalar authbind"
    fi
    display_success "Authbind instalado"
fi

# 5.6: Crear regla para puerto 80
AUTHBIND_PORT_FILE="/etc/authbind/byport/80"
if [ ! -f "$AUTHBIND_PORT_FILE" ]; then
    if ! touch "$AUTHBIND_PORT_FILE"; then
        display_error "No se pudo crear $AUTHBIND_PORT_FILE"
    fi
    chown "$REAL_USER:$REAL_USER" "$AUTHBIND_PORT_FILE"
    chmod 500 "$AUTHBIND_PORT_FILE"
    display_success "Authbind configurado para puerto 80"
else
    display_success "Authbind ya estaba configurado"
fi

# 6: Configuración del servicio systemd ---
echo -e "\n${BOLD}6. Configurando servicio systemd...${NC}"

if [ ! -f "$REPO_SERVICE_FILE" ]; then
    display_error "No se encontró $REPO_SERVICE_FILE"
fi

# Copiar y configurar archivo de servicio
if ! cp "$REPO_SERVICE_FILE" "$SYSTEMD_SERVICE_FILE"; then
    display_error "Error al copiar el archivo de servicio"
fi

# Actualizar valores en el archivo de servicio
sed -i -e "s|/home/rpi/Odoco|$INSTALL_DIR|g" \
       -e "s|User=rpi|User=$REAL_USER|g" \
       -e "s|/usr/bin/gunicorn|$VENV_DIR/bin/gunicorn|g" \
       "$SYSTEMD_SERVICE_FILE"

# Configurar permisos
chown root:root "$SYSTEMD_SERVICE_FILE"
chmod 644 "$SYSTEMD_SERVICE_FILE"
display_success "Servicio configurado en $SYSTEMD_SERVICE_FILE"

# --- Paso 7: Habilitar servicio ---
echo -e "\n${BOLD}7. Activando servicio...${NC}"

systemctl daemon-reload || display_error "Error al recargar systemd"

if ! systemctl enable "$SERVICE_NAME"; then
    display_error "Error al habilitar el servicio"
fi

if check_service_active "$SERVICE_NAME"; then
    systemctl restart "$SERVICE_NAME"
else
    systemctl start "$SERVICE_NAME"
fi

if check_service_active "$SERVICE_NAME"; then
    display_success "Servicio activo y en ejecución"
else
    display_error "El servicio no se pudo iniciar"
fi

# 8. Configurando Access Point Odoco
echo -e "\n${BOLD}8. Configurando Access Point Odoco...${NC}"

# Ejecutar el script del AP
if ! sudo ./odoco_ap_setup.sh; then
    display_warning "Error al configurar el AP. ¿Continuar? [S/n]"
    read -r response
    if [[ "$response" =~ ^[Nn] ]]; then
        display_error "Instalación abortada."
    fi
else
    display_success "Access Point y NAT configurados correctamente."
fi

# --- Mostrar resumen final ---
IP_ADDRESS=$(hostname -I | awk '{print $1}')
echo -e "\n${BOLD}${GREEN}✔ Instalación completada con éxito${NC}"
echo -e "\n${BOLD}Resumen de configuración:${NC}"
echo "-------------------------------------"
echo "Usuario del servicio:    $REAL_USER"
echo "Directorio de instalación: $INSTALL_DIR"
echo "Entorno virtual:        $VENV_DIR"
echo "Archivo de servicio:     $SYSTEMD_SERVICE_FILE"
echo "Dirección de acceso:     http://$IP_ADDRESS/service-admin"
echo "-------------------------------------"

echo -e "\n${BOLD}Comandos útiles:${NC}"
echo "• Estado del servicio:  sudo systemctl status $SERVICE_NAME"
echo "• Iniciar servicio:     sudo systemctl start $SERVICE_NAME"
echo "• Detener servicio:     sudo systemctl stop $SERVICE_NAME"
echo "• Reiniciar servicio:   sudo systemctl restart $SERVICE_NAME"
echo "• Ver logs:            sudo journalctl -u $SERVICE_NAME -f"
echo "• Activar entorno:     source $VENV_DIR/bin/activate"

echo -e "\n${YELLOW}Notas importantes:${NC}"
echo "1. Para cambios en la configuración:"
echo "   sudo nano $SYSTEMD_SERVICE_FILE && sudo systemctl restart $SERVICE_NAME"
echo "2. Para desinstalar:"
echo "   sudo systemctl stop $SERVICE_NAME"
echo "   sudo rm $SYSTEMD_SERVICE_FILE"
echo "   sudo systemctl daemon-reload"