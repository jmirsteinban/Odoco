# Instalar monitor de rendimiento
sudo apt install htop
sudo htop -u rpi

# Ver uso de recursos en tiempo real
sudo dstat -cmdn --top-cpu --top-mem

---------------------------------------


sudo apt install samba
whereis samba
out: samba: /usr/sbin/samba /usr/lib/samba /etc/samba /usr/share/samba /usr/share/man/man7/samba.7.gz /usr/share/man/man8/samba.8.gz

The configuration file for Samba is located at /etc/samba/smb.conf. 
sudo nano /etc/samba/smb.conf


[Odoco]
    comment = Samba on Ubuntu
    path = /home/kickpi/Odoco
    read only = no
    browsable = yes


sudo service smbd restart
sudo ufw allow samba

sudo smbpasswd -a kickpi

----------------------------------------


Detener Todo 
sudo systemctl stop odoco-web.service
sudo pkill -f "gunicorn.*odoco"

Debuguear ERROR HTML sedrve
sudo journalctl -u odoco-web.service -n 50 --no-pager




---------------------------------------

Paso 1: Verificar el punto de acceso WiFi
Lista las conexiones existentes:

bash
sudo nmcli con show
Deberías ver tu conexión "Hotspot" en la lista.

Activa el punto de acceso:

bash
sudo nmcli con up Hotspot
Verifica la IP asignada a wlan0:

bash
ip -4 addr show wlan0

--------------------------------------------

Paso 2: Configurar NAT y Forwarding
Habilita el reenvío de paquetes:

bash
sudo sysctl -w net.ipv4.ip_forward=1
Añade reglas de iptables (para redirección de tráfico):

bash
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT
Guarda las reglas permanentemente:

bash
sudo netfilter-persistent save
sudo netfilter-persistent reload


Paso 3: Configurar DNS con dnsmasq
Instala dnsmasq (si no está instalado):

bash
sudo apt install dnsmasq
Configura dnsmasq:

bash
sudo nano /etc/dnsmasq.conf
Añade estas líneas:

ini
interface=wlan0
dhcp-range=192.168.4.2,192.168.4.20,255.255.255.0,24h
address=/mco.lbsg.net/192.168.4.1
address=/geo.hivebedrock.network/192.168.4.1
server=8.8.8.8
server=8.8.4.4
Reinicia dnsmasq:

bash
sudo systemctl restart dnsmasq



Paso 4: Instalar y Configurar el Proxy RakNet
Crea el script Python (raknet_proxy.py):

bash
sudo nano /usr/local/bin/raknet_proxy.py
Pega el código del script mejorado que te proporcioné anteriormente.

Hazlo ejecutable:

bash
sudo chmod +x /usr/local/bin/raknet_proxy.py
Crea un servicio systemd:

bash
sudo nano /etc/systemd/system/raknet_proxy.service
Contenido:

ini
[Unit]
Description=Minecraft RakNet Proxy
After=network.target

[Service]
ExecStart=/usr/bin/python3 /usr/local/bin/raknet_proxy.py
Restart=always
User=root

[Install]
WantedBy=multi-user.target
Inicia el servicio:

bash
sudo systemctl enable --now raknet_proxy.service



Paso 5: Probar la Configuración
Conecta tu Nintendo Switch al WiFi "MinecraftRedirector".

Abre Minecraft Bedrock y selecciona cualquier servidor.

Verifica que el tráfico se redirija correctamente:

bash
sudo tcpdump -i wlan0 port 19132 -n

*********************************************

Posibles Problemas y Soluciones
El punto de acceso no aparece:

bash
sudo nmcli con down Hotspot && sudo nmcli con up Hotspot
El DNS no redirige:

bash
dig mco.lbsg.net @192.168.4.1
El proxy no responde:

bash
journalctl -u raknet_proxy -f
